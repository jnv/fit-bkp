Automatically generated by Mendeley 1.5.2
Any changes to this file will be lost if it is regenerated by Mendeley.

@misc{WikiWiki,
author = {{Přisp\v{e}vatel\'{e} Wikipedie}},
booktitle = {Wikipedie: Otevřen\'{a} encyklopedie.},
keywords = {wiki},
mendeley-tags = {wiki},
publisher = {Wikimedia Foundation},
title = {{Wiki}},
url = {http://cs.wikipedia.org/w/index.php?title=Wiki\&oldid=8421194},
urldate = {14/05/12},
year = {2012}
}
@misc{REEEOL,
author = {Lai, Hongli},
booktitle = {Phusion Corporate Blog},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lai - 2012 - Ruby Enterprise Edition 1.8.7-2012.02 released End of Life imminent.html:html},
keywords = {Ruby Enterprise Edition,mri,ree,ruby},
mendeley-tags = {mri,ree,ruby},
title = {{Ruby Enterprise Edition 1.8.7-2012.02 released; End of Life imminent}},
url = {http://blog.phusion.nl/2012/02/21/ruby-enterprise-edition-1-8-7-2012-02-released-end-of-life-imminent/},
urldate = {13/05/12},
year = {2012}
}
@book{Fowler2003,
abstract = {The practice of enterprise application development has benefited from the emergence of many new enabling technologies. Multi-tiered object-oriented platforms, such as Java and .NET, have become commonplace. These new tools and technologies are capable of building powerful applications, but they are not easily implemented. Common failures in enterprise applications often occur because their developers do not understand the architectural lessons that experienced object developers have learned. "Patterns of Enterprise Application Architecture" is written in direct response to the stiff challenges that face enterprise application developers. The author, noted object-oriented designer Martin Fowler, noticed that despite changes in technology--from Smalltalk to CORBA to Java to .NET--the same basic design ideas can be adapted and applied to solve common problems. With the help of an expert group of contributors, Martin distills over forty recurring solutions into patterns. The result is an indispensable handbook of solutions that are applicable to any enterprise application platform.  This book is actually two books in one. The first section is a short tutorial on developing enterprise applications, which you can read from start to finish to understand the scope of the book's lessons. The next section, the bulk of the book, is a detailed reference to the patterns themselves. Each pattern provides usage and implementation information, as well as detailed code examples in Java or C\#. The entire book is also richly illustrated with UML diagrams to further explain the concepts.  Armed with this book, you will have the knowledge necessary to make important architectural decisions about building an enterprise application and the proven patterns for use when building them.  The topics covered include: Dividing an enterprise application into layersThe major approaches to organizing business logicAn in-depth treatment of mapping between objects and relational databasesUsing Model-View-Controller to organize a Web presentationHandling concurrency for data that spans multiple transactionsDesigning distributed object interfaces  0321127420B10152002},
author = {Fowler, Martin},
isbn = {0321127420},
keywords = {orm},
mendeley-tags = {orm},
pages = {533},
publisher = {Addison-Wesley Professional},
title = {{Patterns of Enterprise Application Architecture}},
url = {http://books.google.com/books?id=FyWZt5DdvFkC\&pgis=1},
year = {2003}
}
@misc{Kinsella2011,
annote = {
        

      },
author = {Kinsella, Jack},
booktitle = {Jack Kinsella - Rails Developer London},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kinsella - 2011 - Why Bother With Cucumber Testing.html:html},
keywords = {rails,tdd},
mendeley-tags = {rails,tdd},
title = {{Why Bother With Cucumber Testing?}},
url = {http://www.jackkinsella.ie/2011/09/26/why-bother-with-cucumber-testing.html},
urldate = {11/05/12},
year = {2011}
}
@misc{why2008,
abstract = {At my local Barnes and Noble, there is a huge wall of Java books just waiting to tip over and crush me one day. And one day it will. At the rate things are going, one day that bookcase will be tall enough to crush us all. It might even loop the world several times, crushing previous editions of the same Java books over and over again. This is just a small Ruby book. It won’t crush you. It’s light as a feather (because I haven’t finished it yet—hehe). And there’s a reason this book will stay light: because Ruby is simple to learn.},
author = {why the lucky Stiff},
file = {:home/j/docs/knihy/why the lucky stiff/why's (poignant) guide to ruby (1)/why's (poignant) guide to ruby - why the lucky stiff.pdf:pdf},
isbn = {B00262VWT8},
keywords = {ruby},
mendeley-tags = {ruby},
title = {{why's (Poignant) Guide to Ruby}},
url = {http://mislav.uniqpath.com/poignant-guide/},
year = {2008}
}
@misc{Libbery2011,
abstract = {The “Skinny controller; fat model” mantra so often repeated in the Rails community is only half-right. Most new Rails developers tend to try to stuff too much logic into controllers. That’s definitely true, and it’s definitely an anti-pattern. Skinny controllers are most certainly the way to go. Fat models, however, should also be considered an anti-pattern. This is something you learn pretty quickly when you start working on a Rails app of any appreciable size: models can get unwieldy very quickly.},
annote = {the skinny controller; fat model mantra so often repeated in the rails community is only half-right. most new rails developers tend to try to stuff too much},
author = {Libbery, Burke},
booktitle = {Quality on Rails},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - “Skinny Controller Fat Model” is misleading.html:html},
keywords = {mvc,rails,refactoring,ruby},
mendeley-tags = {mvc,rails,ruby},
title = {{“Skinny Controller; Fat Model” is misleading}},
url = {http://qualityonrails.com/archives/33},
urldate = {06/05/12},
year = {2011}
}
@misc{Lamontagne2007,
author = {Lamontagne, Fran\c{c}ois},
booktitle = {Ruby Fleebie},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lamontagne - 2007 - Ruby is dynamically AND strongly typed.html:html},
title = {{Ruby is dynamically AND strongly typed}},
url = {http://www.rubyfleebie.com/ruby-is-dynamically-and-strongly-typed/},
urldate = {15/05/12},
year = {2007}
}
@misc{WikiUnixLike,
author = {{Přisp\v{e}vatel\'{e} Wikipedie}},
language = {en},
publisher = {Wikimedia Foundation},
title = {{Unix-like}},
url = {http://en.wikipedia.org/w/index.php?title=Unix-like\&oldid=486367194},
urldate = {17/05/12},
year = {2012}
}
@misc{Keys2011,
annote = {
        

      },
author = {Keys, Adam},
booktitle = {The Real Adam},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Keys - 2011 - Why metaprogram when you can program.html:html},
keywords = {metaprogramming,ruby},
mendeley-tags = {metaprogramming,ruby},
title = {{Why metaprogram when you can program?}},
url = {http://weblog.therealadam.com/2011/12/09/why-metaprogram-when-you-can-program/},
urldate = {06/05/12},
year = {2011}
}
@book{Fried2009,
author = {Fried, Jason and Hansson, David Heinemeier and Linderman, Matthew},
file = {:home/j/docs/knihy/Jason Fried/Getting Real\_ the Smarter, Faster, Easier Way to Build a Successful Web Application (8)/Getting Real\_ the Smarter, Faster, Easier Way to Build a Successful Web Application - Jason Fried.pdf:pdf},
isbn = {0578012812},
pages = {194},
publisher = {37signals},
title = {{Getting Real: The smarter, faster, easier way to build a successful web application}},
url = {http://gettingreal.37signals.com/toc.php},
year = {2009}
}
@misc{Holman2011,
abstract = {Build features fast. Ship them. That's what we try to do at GitHub. Our process is the anti-process: what's the minimum overhead we can put up with to keep our code quality high, all while building features *as quickly as possible*? It's not just features, either: faster development means happier developers.},
author = {Holman, Zach},
keywords = {git,lean},
mendeley-tags = {git,lean},
month = oct,
shorttitle = {holman11},
title = {{How GitHub Uses GitHub to Build GitHub}},
url = {http://zachholman.com/talk/how-github-uses-github-to-build-github},
urldate = {2012-03-17},
year = {2011}
}
@book{Fulton2009,
address = {Brno},
author = {Fulton, Hal},
edition = {Vyd. 1.},
isbn = {9788074130182},
keywords = {ruby},
mendeley-tags = {ruby},
publisher = {Zoner Press},
title = {{Ruby: Kompendium znalost\'{\i} pro za\v{c}\'{a}te\v{c}n\'{\i}ky i profesion\'{a}ly}},
translator = {Koutn\'{y}, Jiř\'{\i}},
year = {2009}
}
@misc{WikipediaNestedSet,
author = {{Přisp\v{e}vatel\'{e} Wikipedie}},
booktitle = {Wikipedia, The Free Encyclopedia.},
keywords = {database,rdbms,tree},
language = {en},
mendeley-tags = {rdbms,tree},
publisher = {Wikimedia Foundation},
title = {{Nested set model}},
url = {http://en.wikipedia.org/w/index.php?title=Nested\_set\_model\&oldid=487109605},
urldate = {08/05/12},
year = {2012}
}
@misc{MozillaDevProcess,
author = {Mozilla},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - Mozilla Firefox Development Process.html:html},
title = {{Mozilla Firefox: Development Process}},
url = {http://mozilla.github.com/process-releases/draft/development\_overview/},
urldate = {15/05/12},
year = {2011}
}
@misc{HanssonTestingTSA,
author = {Hansson, David Heinemeier},
month = apr,
title = {{Testing like the TSA}},
url = {http://37signals.com/svn/posts/3159-testing-like-the-tsa},
urldate = {2012-04-25},
year = {2012}
}
@misc{FowlerXunit,
annote = {
        

      },
author = {Fowler, Martin},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Fowler - Unknown - Xunit.html:html},
keywords = {tdd,testing},
mendeley-tags = {tdd},
title = {{Xunit}},
url = {http://www.martinfowler.com/bliki/Xunit.html},
urldate = {11/05/12}
}
@misc{Passenger32,
author = {Lai, Hongli},
booktitle = {Phusion Corporate Blog},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lai - 2012 - A sneak preview of Phusion Passenger 3.2(2).html:html},
keywords = {ruby},
mendeley-tags = {ruby},
title = {{A sneak preview of Phusion Passenger 3.2}},
url = {http://blog.phusion.nl/2012/04/13/a-sneak-preview-of-phusion-passenger-3-2/},
urldate = {16/05/12},
year = {2012}
}
@misc{Matsumoto2012,
address = {Boston, MA},
author = {Matsumoto, Yukihiro},
keywords = {ruby},
mendeley-tags = {ruby},
month = mar,
title = {{How Emacs changed my life}},
url = {http://www.slideshare.net/yukihiro\_matz/how-emacs-changed-my-life},
year = {2012}
}
@book{Chelimsky2010,
address = {Lewisville Tex.},
author = {Chelimsky, David},
isbn = {9781934356371},
keywords = {ruby,tdd},
mendeley-tags = {ruby,tdd},
publisher = {Pragmatic},
title = {{The RSpec Book: Behaviour-Driven Development with RSpec, Cucumber, and Friends}},
year = {2010}
}
@book{Olsen2011,
address = {Upper Saddle River NJ},
author = {Olsen, Russ},
file = {:home/j/docs/knihy/Russ Olsen/Eloquent Ruby (22)/Eloquent Ruby - Russ Olsen.pdf:pdf},
isbn = {9780321584106},
keywords = {ruby},
mendeley-tags = {ruby},
publisher = {Addison-Wesley},
title = {{Eloquent Ruby}},
year = {2011}
}
@misc{Stewart2001,
annote = {an interview with yukihiro matz  matsumoto, about ruby, and his new book, ruby in a nutshell.},
author = {Stewart, Bruce},
booktitle = {O'Reilly Media},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Stewart - 2001 - An Interview with the Creator of Ruby.html:html},
title = {{An Interview with the Creator of Ruby}},
url = {http://linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html},
urldate = {15/05/12},
year = {2001}
}
@misc{Hansson2006,
address = {London, England},
annote = {FOWA 2006, London},
author = {Hansson, David Heinemeier},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hansson - 2006 - Happy Programming with Ruby on Rails.pdf:pdf},
keywords = {rails,ruby},
mendeley-tags = {rails,ruby},
publisher = {FOWA},
title = {{Happy Programming with Ruby on Rails}},
url = {http://media.rubyonrails.org/presentations/programminghappiness.pdf},
year = {2006}
}
@misc{ChiliProjectWhyFork,
author = {{Přisp\v{e}vatel\'{e} ChiliProject}},
booktitle = {ChiliProject Wiki},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Přisp\v{e}vatel\'{e} ChiliProject - 2011 - Why Fork.html:html},
keywords = {bug,chiliproject,fork,issue,redmine,tracker},
mendeley-tags = {chiliproject,fork,redmine},
title = {{Why Fork?}},
url = {https://www.chiliproject.org/projects/chiliproject/wiki/Why\_Fork?version=11},
urldate = {15/05/12},
year = {2011}
}
@misc{Muhl2012,
author = {Muhl, John},
keywords = {ci,test},
mendeley-tags = {ci,test},
month = jan,
title = {{How to enable Travis CI for an extension}},
url = {http://radiantcms.org/blog/archives/2012/01/06/how-to-enable-travis-ci-for-an-extension/},
urldate = {2012-04-10},
year = {2012}
}
@misc{Cook2008,
abstract = {The traditional bug triage process is miserably inefficient. Over my decade in this industry, I’ve spent months of my life sitting in windowless offices manually reviewing (and re-reviewing) thousands of bugs. Often times, there are three or four folks on the triage team, typically the most skilled people on the team, sitting about and bickering for hours over the finer points of obscure bugs. Politics, boredom and arbitrary decisions are unfortunately common. The result is wasted time and poorly managed bugs. So we came up with a better way. User Pain is a technique I’ve been using for many releases across multiple teams. It involves sorting bugs on a single unified scale called User Pain that takes into account common bug ranking criteria. I’ve found that it can reduce the cost of triage, help teams ship on time and greatly clarify which bugs you should be fixing right now. This essay describes how User Pain works and some best practices for implementing it on your team.},
author = {Cook, Daniel},
keywords = {bugtracker},
language = {English},
mendeley-tags = {bugtracker},
month = may,
shorttitle = {cook08},
title = {{Improving Bug Triage with User Pain}},
url = {http://www.lostgarden.com/2008/05/improving-bug-triage-with-user-pain.html},
urldate = {2012-03-18},
year = {2008}
}
@misc{Grimm2012,
abstract = {Objects on Rails is a "developer's notebook" documenting some guidelines, techniques, and ideas for applying classic object-oriented thought to Ruby on Rails applications. This book is aimed at the working Rails developer who is looking to grow and evolve Rails projects while keeping them flexible, maintainable, and robust. The focus is on pragmatic solutions which tread a "middle way" between the expedience of the Rails "golden path", and rigid OO purity.},
author = {Grimm, Avdi},
file = {:home/j/docs/knihy/Avdi Grimm/Objects on Rails (104)/Objects on Rails - Avdi Grimm.pdf:pdf},
keywords = {oop,rails,ruby},
mendeley-tags = {oop,rails,ruby},
title = {{Objects on Rails}},
url = {http://objectsonrails.com/},
year = {2012}
}
@book{Hartl2011,
address = {Upper Saddle River NJ ; London},
author = {Hartl, Michael},
file = {:home/j/docs/knihy/Michael Hartl/Ruby on Rails 3 Tutorial\_ Learn Rails by Example (Addison-Wesley Professional Ruby Series) (5)/Ruby on Rails 3 Tutorial\_ Learn Rails by Example (Addison-Wesley Professional Ruby Series) - Michael Hartl.pdf:pdf},
isbn = {9780132492546},
keywords = {rails,ruby},
mendeley-tags = {rails,ruby},
publisher = {Addison-Wesley},
title = {{Ruby on Rails 3 Tutorial}},
year = {2011}
}
@misc{BenVinegar2007,
abstract = {[\ldots] When Rails sees a column named ‘type’ for models that aren’t immediate children of ActiveRecord::Base, it assumes that column holds the class name associated with your model. This is how Rails implements single table inheritance, and if that’s not what you intended, you’ve got a little extra work ahead of you.},
author = {Vinegar, Ben},
keywords = {rails},
mendeley-tags = {rails},
month = jan,
shorttitle = {vinegar07},
title = {{Legacy Rails - beware of 'type' columns}},
url = {http://benv.ca/2007/1/16/legacy-rails-beware-of-type-columns/ http://apidock.com/rails/v2.3.8/ActiveRecord/Base/inheritance\_column/class},
urldate = {2012-04-17},
year = {2007}
}
@misc{Krzywda2011,
abstract = {Everyone promotes Rails as a MVC framework. I did that as well. However, the truth is that Rails represents the Model2 architecture. It's not MVC.},
author = {Krzywda, Andrzej},
keywords = {mvc,rails},
mendeley-tags = {mvc,rails},
month = sep,
shorttitle = {krzywda11},
title = {{Rails is not MVC}},
url = {http://andrzejonsoftware.blogspot.com/2011/09/rails-is-not-mvc.html},
urldate = {2012-03-17},
year = {2011}
}
@misc{TracRedMine,
author = {{Přisp\v{e}vatel\'{e} Trac}},
booktitle = {Trac Wiki},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Přisp\v{e}vatel\'{e} Trac - 2011 - RedMine.html:html},
title = {{RedMine}},
url = {http://trac.edgewall.org/wiki/RedMine?version=4},
urldate = {14/05/12},
year = {2011}
}
@misc{McCallister2004,
author = {McCallister, Brian},
booktitle = {Brian's Waste of Time},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/McCallister - 2004 - MVC, Model 2, Java WebApps, (and callcc, why not).html:html},
keywords = {mvc},
mendeley-tags = {mvc},
title = {{MVC, Model 2, Java WebApps, (and callcc, why not) }},
url = {http://kasparov.skife.org/blog/src/java/mvc.html},
urldate = {07/05/12},
year = {2004}
}
@misc{FowlerMocks,
abstract = {The term 'Mock Objects' has become a popular one to describe special case objects that mimic real objects for testing. Most language environments now have frameworks that make it easy to create mock objects. What's often not realized, however, is that mock objects are but one form of special case test object, one that enables a different style of testing. In this article I'll explain how mock objects work, how they encourage testing based on behavior verification, and how the community around them uses them to develop a different style of testing.},
author = {Fowler, Martin},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - 2007 - Mocks Sren't Stubs.html:html},
keywords = {tdd,testing},
mendeley-tags = {tdd},
title = {{Mocks Aren't Stubs}},
url = {http://martinfowler.com/articles/mocksArentStubs.html},
urldate = {12/05/12},
year = {2007}
}
@misc{Buck2006,
annote = {
        

      },
author = {Buck, Jamis},
booktitle = {the \{ buckblogs :here \}},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Buck - 2006 - Skinny Controller, Fat Model.html:html},
keywords = {mvc,rails},
mendeley-tags = {mvc,rails},
title = {{Skinny Controller, Fat Model}},
url = {http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model},
urldate = {08/05/12},
year = {2006}
}
@misc{McAlpin2011,
author = {McAlpin, Lawrence},
keywords = {rails,ruby},
mendeley-tags = {rails,ruby},
month = may,
title = {{Overriding Rails validations metaprogramatically}},
url = {http://www.lmcalpin.com/post/5219540409/overriding-rails-validations-metaprogramatically},
year = {2011}
}
@book{Rappin2011,
address = {Raleigh N.C.},
author = {Rappin, Noel},
file = {:home/j/docs/knihy/Noel Rappin PH.D\_/Rails Test Prescriptions (2)/Rails Test Prescriptions - Noel Rappin PH.D\_.pdf:pdf},
isbn = {9781934356647},
keywords = {rails,tdd},
mendeley-tags = {rails,tdd},
pages = {350},
publisher = {Pragmatic Bookshelf},
title = {{Rails Test Prescriptions}},
year = {2011}
}
@misc{T.J.Schuck2012,
abstract = {We're thrilled to announce that all of our apps have been upgraded from REE to Ruby 1.9.3. We wanted to share some notes about what went well, what went wrong, and what we learned in the process.},
author = {Schuck, T.J.},
keywords = {rails,ruby},
mendeley-tags = {rails,ruby},
month = apr,
title = {{Lessons Learned Upgrading Harvest to Ruby 1.9.3}},
url = {http://techtime.getharvest.com/blog/harvest-is-now-on-ruby-1-dot-9-3},
year = {2012}
}
@misc{Parsons2011,
author = {Parsons, Chris},
file = {:home/j/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - Your tests are lying to you.html:html},
keywords = {bdd,code,craftsmanship,cucumber,rails,tdd},
mendeley-tags = {rails,tdd},
title = {{Your tests are lying to you}},
url = {http://chrismdp.github.com/2011/10/your-tests-are-lying-to-you/},
urldate = {12/05/12},
year = {2011}
}
